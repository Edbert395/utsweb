<!DOCTYPE html>
<html>
  <head>
    <title>Home Todo App</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js" integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy" crossorigin="anonymous"></script>
    <link rel="stylesheet" type="text/css" href="/css/style.css" />
  </head>
  <body>
    <h2>Home Todo App</h2>
    <div class="">
      <button id="add" type="button" class="btn btn-primary" data-toggle="modal">
        Add
      </button>
      <button type="button" class="btn btn-primary" data-toggle="modal" id="logout">logout</button>
    </div>
    <table class="table table-dark">
      <thead>
        <tr>
          <th scope="col">#</th>
          <th scope="col">Title</th>
          <th scope="col">Category</th>
          <th scope="col">Deadline</th>
          <th scope="col">Status</th>
          <th scope="col"></th>
          <th scope="col"></th>
        </tr>
      </thead>
      <tbody id="tbody">
      </tbody>
    </table>
    <div class="modal fade" id="taskModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-modal="true"
    role="dialog">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header d-flex justify-content-between">
              <h5 class="modal-title" id="modal-label">Tambah Task</h5>
              <button type="button" class="close" aria-label="Close" onclick="closeModal()">
                  <span aria-hidden="true">Ã—</span>
              </button>
          </div>
          <div class="modal-body">
            <form>
              <div class="form-group">
                <label for="title">Title</label>
                <input required type="text" class="form-control" id="title" placeholder="Title">
              </div>
              <div class="form-group">
                <label for="category">Category</label>
                <input required type="text" class="form-control" id="category" placeholder="Category">
              </div>
              <div class="form-group">
                <label for="deadline">Deadline</label>
                <input required type="date" class="form-control" id="deadline" placeholder="Deadline">
              </div>
              <div class="form-group">
                <label for="status">Status</label>
                <input required type="text" class="form-control" id="status" placeholder="Status">
              </div>
            </form>
          </div>
          <div class="modal-footer">
              <button type="button" class="btn btn-secondary" onclick="closeModal()">Close</button>
              <button type="button" class="btn btn-primary" id="saveButton">Save changes</button>
          </div>
        </div>
      </div>
  </div>
  <div class="modal-backdrop fade show" id="backdrop" style="display: none;"></div>
  </body>
  <script>
    const edit = (id, title, category, deadline, status) => {
      const token = localStorage.getItem("token");
      fetch("http://localhost:3000/api/tasks/" + id, {
        headers: {
          ["Content-Type"]: "application/json",
          ["Authorization"]: `Bearer ${token}`
        },
        method: "PUT",
        body: JSON.stringify({
          title, category, deadline, status
        })
      }).then(async (res) => {
        loadTasks();
        clearModal();
        closeModal();
      }).catch((err) => {
        alert(err.message);
      })
    }

    const remove = (id) => {
      const token = localStorage.getItem("token");
      fetch("http://localhost:3000/api/tasks/" + id, {
        headers: {
          ["Content-Type"]: "application/json",
          ["Authorization"]: `Bearer ${token}`
        },
        method: "DELETE"
      }).then(async (res) => {
        loadTasks();
      }).catch((err) => {
        alert(err.message);
      })
    }

    const create = (title, category, deadline, status) => {
      const token = localStorage.getItem("token");
      fetch("http://localhost:3000/api/tasks/", {
        headers: {
          ["Content-Type"]: "application/json",
          ["Authorization"]: `Bearer ${token}`
        },
        method: "POST",
        body: JSON.stringify({
          title, category, deadline, status
        })
      }).then(async (res) => {
        loadTasks();
        clearModal();
        closeModal();
      }).catch((err) => {
        alert(err.message);
      })
    }

    const loadTasks = () => {
      const token = localStorage.getItem("token");
      fetch("http://localhost:3000/api/tasks", {
        headers: {
          ["Content-Type"]: "application/json",
          ["Authorization"]: `Bearer ${token}`
        }
      }).then(async (res) => {
        if (res.ok) {
          const data = await res.json();
          const tbody = document.getElementById("tbody");
          tbody.innerHTML = "";
          for (let i = 0; i < data.length; i++) {
            console.log(data[i]);
            const row = data[i];
            const tr = document.createElement("tr");
            const th = document.createElement("th");
            th.attributes = {
              "scope": "row"
            }
            th.innerText = i + 1;
            const tdTitle = document.createElement("td");
            const tdCategory = document.createElement("td");
            const tdDeadline = document.createElement("td");
            const tdStatus = document.createElement("td");
            tdTitle.innerText = row.title;
            tdCategory.innerText = row.category;
            tdDeadline.innerText = row.deadline;
            tdStatus.innerText = row.status;
            tr.appendChild(th);
            tr.appendChild(tdTitle);
            tr.appendChild(tdCategory);
            tr.appendChild(tdDeadline);
            tr.appendChild(tdStatus);
            
            const tdEdit = document.createElement("td");
            const editButton = document.createElement("button");
            tdEdit.appendChild(editButton);
            editButton.innerText = "Edit"
            editButton.addEventListener("click", function (event) {
              openModal(row);
            });

            const tdDelete = document.createElement("td");
            const deleteButton = document.createElement("button");
            tdDelete.appendChild(deleteButton);
            deleteButton.innerText = "Delete"

            tr.appendChild(tdEdit);
            tr.appendChild(tdDelete);

            deleteButton.addEventListener("click", function (event) {
              remove(data[i]._id)
            });
            
            tbody.appendChild(tr);
          }
        } else {
          if (res.status == 401) {
            window.location.href = "http://localhost:3000/"
          } else {
            const data = await res.json();
            alert(data.message);
          }
        }
      }).catch((err) => {
        alert(err.message);
      })
    }

    function openModal(task) {
        document.getElementById("backdrop").style.display = "block"
        document.getElementById("taskModal").style.display = "block"
        document.getElementById("taskModal").classList.add("show")
        if (task) {
          document.getElementById("taskModal").setAttribute("taskId", task._id)
          document.getElementById("title").value = task.title;
          document.getElementById("category").value = task.category;
          document.getElementById("deadline").value = task.deadline.split("T")[0];
          document.getElementById("status").value = task.status;
          document.getElementById("modal-label").innerText = "Edit Tugas";
        } else {
          document.getElementById("taskModal").removeAttribute("taskId");
          document.getElementById("modal-label").innerText = "Tambah Tugas";
        }
    }

    function closeModal() {
        document.getElementById("backdrop").style.display = "none"
        document.getElementById("taskModal").style.display = "none"
        document.getElementById("taskModal").classList.remove("show")
    }

    function clearModal() {
      document.getElementById("title").value = "";
      document.getElementById("category").value = "";
      document.getElementById("deadline").value = "";
      document.getElementById("status").value = "";
    }

    document.addEventListener("DOMContentLoaded", (event) => {
      // Get the modal
      const modal = document.getElementById('taskModal');
      // When the user clicks anywhere outside of the modal, close it
      window.onclick = function(event) {
        if (event.target == modal) {
          closeModal()
        }
      }
      
      const logoutButton = document.getElementById("logout");
      logoutButton.addEventListener("click", function (event) {
        localStorage.removeItem("token");
        window.location.href = "http://localhost:3000/";
      })

      const addButton = document.getElementById("add");
      addButton.addEventListener("click", function (event) {
        openModal(null);
      })

      const saveButton = document.getElementById("saveButton");
      saveButton.addEventListener("click", function (event) {
        event.preventDefault();
        const title = document.getElementById("title").value;
        const category = document.getElementById("category").value;
        const deadline = document.getElementById("deadline").value;
        const status = document.getElementById("status").value;
        
        const taskId = document.getElementById("taskModal").getAttribute("taskId");
        if (taskId) { // berarti form untuk edit
          edit(taskId, title, category, deadline, status)
        } else {
          create(title, category, deadline, status);
        }
      })

      const token = localStorage.getItem("token");
      if (!token) {
        window.location.href = "http://localhost:3000/";
        return;
      }
      
      loadTasks();
    });
  </script>
</html>
